package com.yichuang.fuyang.web;

import java.io.File;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.disk.DiskFileItem;
import org.apache.commons.net.ftp.FTPClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.github.pagehelper.PageInfo;
import com.mysql.jdbc.Util;
import com.yichuang.fuyang.entity.PostAtoms;
import com.yichuang.fuyang.entity.Posts;
import com.yichuang.fuyang.entity.User;
import com.yichuang.fuyang.entity.Volunteers;
import com.yichuang.fuyang.service.PostAtomsService;
import com.yichuang.fuyang.service.PostsService;
import com.yichuang.fuyang.service.PropertyService;
import com.yichuang.fuyang.service.UserService;
import com.yichuang.fuyang.service.VolunteersService;
import com.yichuang.fuyang.service.YichuangException;
import com.yichuang.fuyang.util.DefaultResponse;
import com.yichuang.fuyang.util.FTPUtil;
import com.yichuang.fuyang.util.JsonResult;
import com.yichuang.fuyang.util.TokenUtils;
import com.yichuang.fuyang.util.Utils;
/**
 * 社区功能
 */
@Controller
@RequestMapping("/community")
public class CommunityController {
	@Autowired
	private PostsService postsService;

	@Autowired
	private PropertyService propertyService;
	
	@Autowired
	private PostAtomsService postAtomsService;
	
	@Autowired
	private UserService userService;

	/**
	 * 获取帖子列表
	 * 
	 * @param pageNo
	 * @param pageSize
	 * @return
	 */
	@RequestMapping("/posts")
	@ResponseBody
	public JsonResult<PageInfo<Posts>> getPostsList(Integer pageNo,Integer pageSize,String keyParams) {
		JsonResult<PageInfo<Posts>> result = null;
		try {
			JsonResult<PageInfo<Posts>> checkResult = Utils.checkKeyParams(propertyService.KEY, keyParams);
			if(checkResult != null){
				result = checkResult;
			}else{
				PageInfo<Posts> list = postsService.queryPosts(pageNo, pageSize);
				result = new JsonResult<PageInfo<Posts>>(list);
			}
			return result;
		} catch (YichuangException e) {
			e.printStackTrace();
			return new JsonResult<PageInfo<Posts>>(1, "获取帖子失败", null);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult<PageInfo<Posts>>(e);
		}
	}
	
	/**
	 * 根据标题搜索帖子
	 * @param title
	 * @param pageNo
	 * @param pageSize
	 * @return
	 */
	@RequestMapping("/searchPosts")
	@ResponseBody
	public JsonResult<PageInfo<Posts>> searchPostsByTitle(String title,Integer pageNo,Integer pageSize,String keyParams) {
		JsonResult<PageInfo<Posts>> result = null;
		try {
			JsonResult<PageInfo<Posts>> checkResult = Utils.checkKeyParams(propertyService.KEY, keyParams);
			if(checkResult != null){
				result = checkResult;
			}else{
				if(StringUtils.isEmpty(title)){//标题为空搜索全部帖子
					PageInfo<Posts> list = postsService.queryPosts(pageNo, pageSize);
					result = new JsonResult<PageInfo<Posts>>(list);
				}else{
					PageInfo<Posts> list = postsService.getPostByTitle(title, pageNo, pageSize);
					result = new JsonResult<PageInfo<Posts>>(list);
				}
			}
			return result;
		} catch (YichuangException e) {
			e.printStackTrace();
			return new JsonResult<PageInfo<Posts>>(1, "获取帖子失败", null);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult<PageInfo<Posts>>(e);
		}
	}

//	/**
//	 * 发帖
//	 * @param req
//	 * @param posts
//	 * @param token
//	 * @param session
//	 * @return
//	 */
//	@RequestMapping("/savePosts")
//	@ResponseBody
//	public JsonResult<Posts> savePosts(HttpServletRequest req, Posts posts,String token, HttpSession session,String keyParams) {
//		JsonResult<Posts> result = null;
//		try {
//			JsonResult<Posts> checkResult = Utils.checkKeyParams(token+propertyService.KEY, keyParams);
//			if(checkResult != null){
//				result = checkResult;
//			}else if (session.getAttribute(token) == null) {
//				result = new JsonResult<Posts>(1, "token is failure", null);
//			}else if (req instanceof MultipartHttpServletRequest) {
//				
//				MultipartHttpServletRequest request = (MultipartHttpServletRequest) req;
//
//				List<MultipartFile> files = request.getFiles("imagefiles");
//				if (files != null) {
//					// 图片的绝对路径
//					String filepath = propertyService.REMOTE_IMAGE_POST;
//							
//					File file1 = new File(filepath);
//					if (!file1.exists()) {
//						file1.mkdirs();
//					}
//					// 图片的URL访问路径
//					String filedPath = propertyService.REMOTE_IMAGE_POST;
//							
//					String fileURL = "";
//					int i = 0;
//					for (MultipartFile multipartFile : files) {
//						// 图片正则表达式
//						String reg = ".+(.JPEG|.jpeg|.JPG|.jpg|.GIF|.gif|.BMP|.bmp|.PNG|.png)$";
//						boolean Filedflag = checkeFile(reg,
//								multipartFile.getOriginalFilename());
//						if (!Filedflag) {
//							return new JsonResult<Posts>(1,
//									"The file format is not correct", null);
//						}
//						String filedUUID = getUUID();
//						String filedEnd = getEnd(multipartFile
//								.getOriginalFilename());
//						// 图片保存
//						String localFilePath = filepath + filedUUID + filedEnd;
//						File localFile = new File(localFilePath);
//						multipartFile.transferTo(localFile);
//						if(i>0){
//							fileURL+=",";
//						}
//						i++;
//						// 图片链接地址拼接
//						fileURL = fileURL + filedPath + filedUUID + filedEnd;
//					}
//					posts.setUrl("");
//					posts.setUrl(fileURL);
//					postsService.savePosts(posts);
//					result = new JsonResult<Posts>(0, "添加成功", null);
//				} 
//				
//			}else {
//				posts.setUrl(null);
//				postsService.savePosts(posts);
//				result = new JsonResult<Posts>(0, "添加成功", null);
//			}
//			return result;
//		} catch (YichuangException e) {
//			e.printStackTrace();
//			return new JsonResult<Posts>(1, "添加失败", null);
//		} catch (Exception e) {
//			e.printStackTrace();
//			return new JsonResult<Posts>(1, "添加失败", null);
//		}
//	}
	
	/**
	 * 发帖
	 * @param req
	 * @param posts
	 * @param token
	 * @param session
	 * @return
	 */
	@RequestMapping("/savePosts")
	@ResponseBody
	public JsonResult<Posts> savePosts(HttpServletRequest req, Posts posts,String token, HttpSession session,String keyParams) {
			JsonResult<Posts> result = null;
			JsonResult<Posts> checkResult = Utils.checkKeyParams(token+propertyService.KEY, keyParams);
			if(checkResult != null){
				return checkResult;
			}
			if(StringUtils.isEmpty(posts.getVolunteerId())){
				return new JsonResult<Posts>(DefaultResponse.PARAM_NULL_ERROR,null);
			}
			
			User user = new User();
			user.setVolunteerId(posts.getVolunteerId());
			
			List<User> list = userService.getUserByVolunId(user);
			if(list != null && list.size() >0){
				if(!list.get(0).getToken().equals(token)){
					return new JsonResult<Posts>(DefaultResponse.TOKEN_NULL_ERROR,null);
				}
			}
			if (req instanceof MultipartHttpServletRequest) {
				Map<String, Object> connectReturnMap = null;
				FTPClient ftp = null;
				String fileURL = "";
				MultipartHttpServletRequest request = (MultipartHttpServletRequest) req;
				
				List<MultipartFile> files = request.getFiles("imagefiles");
				if (files != null && files.size() > 0) {
					for(int i = 0;i < files.size();i++){
						// 根据上传文件名称获取上传的文件
						MultipartFile file1 = request.getFile("imagefiles");
							
							// 将MultipartFile 转为 File
						CommonsMultipartFile cf = (CommonsMultipartFile) file1;
						DiskFileItem fi = (DiskFileItem) cf.getFileItem();
						File fileFrom = fi.getStoreLocation();
						String systFileName = UUID.randomUUID().toString()+"."+Utils.getFileSuffix(fi.getName());
						try {
							connectReturnMap = FTPUtil.connect(propertyService.REMOTE_IMAGE_POST, propertyService.REMOTE_IMAGE_IP,
									propertyService.REMOTE_IMAGE_PORT, propertyService.REMOTE_IMAGE_USERNAME,
									propertyService.REMOTE_IMAGE_PASSWORD);
							if(connectReturnMap != null && (boolean)connectReturnMap.get("connectFlag")){
								ftp = (FTPClient) connectReturnMap.get("FTPClient");
								FTPUtil.upload(fileFrom, systFileName,ftp);
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
						String url = propertyService.OFFICIAL_SITE+propertyService.REMOTE_IMAGE_POST_LOOK + systFileName;
						if(i>0){
							fileURL+=",";
						}
						fileURL = fileURL + url;
					}
					posts.setUrl("");
					posts.setUrl(fileURL);
					postsService.savePosts(posts);
					result = new JsonResult<Posts>(DefaultResponse.SUCCESS,null);
				} 
			}else {
				posts.setUrl(null);
				postsService.savePosts(posts);
				result = new JsonResult<Posts>(DefaultResponse.SUCCESS,null);
			}
			return result;
		
	}

	
	/**
	 * 点赞
	 * 
	 * @param id
	 * @param token
	 * @param session
 	 * @return
	 */
	@RequestMapping("/updateZan")
	@ResponseBody
	public JsonResult<Posts> updatePoatsZan(String id, String token,HttpSession session,String keyParams) {
		JsonResult<Posts> result = null;
		
		try {
			JsonResult<Posts> checkResult = Utils.checkKeyParams(id+token+propertyService.KEY, keyParams);
			if(checkResult != null){
				result = checkResult;
			}else{
				Object user = session.getAttribute(token);
				if (user == null) {
					result = new JsonResult<Posts>(1, "token is failure", null);
				}
				Posts posts = postsService.updatePostsZan(id);
				result = new JsonResult<Posts>(posts);
			}
			return result;
		} catch (YichuangException e) {
			e.printStackTrace();
			return new JsonResult<Posts>(e.getField(), e.getMessage(), null);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult<Posts>(1,"点赞失败 ",null);
		}
	}

	
	/**
	 * 获取帖子评论数
	 * @param postAtoms
	 * @return
	 */
	@RequestMapping("atomsSum")
	@ResponseBody
	public JsonResult<Integer> atomsSum(PostAtoms postAtoms){
		if(StringUtils.isEmpty(postAtoms.getPostId())){
			return new JsonResult<Integer>(DefaultResponse.PARAM_NULL_ERROR,null);
		}
		try {
			Integer integer = postAtomsService.findAtomsSum(postAtoms);
			return new JsonResult<Integer>(DefaultResponse.SUCCESS,integer);
		} catch (Exception e) {
			e.printStackTrace();
			return new JsonResult<Integer>(DefaultResponse.QUERY_ERROR,null);
		}
		
	}
	
	/**
	 * 获取帖子评论
	 * @param id	帖子Id
	 * @param pageNo
	 * @param pageSize
	 * @param keyParams
	 * @return
	 */
	@RequestMapping("/postAtoms")
	@ResponseBody
    public JsonResult<PageInfo<PostAtoms>> getPostAtomsList(String id,Integer pageNo,Integer pageSize,String keyParams){
		JsonResult<PageInfo<PostAtoms>> result = null;
		try{
			JsonResult<PageInfo<PostAtoms>> chekcResult = Utils.checkKeyParams(id+propertyService.KEY, keyParams);
			if(chekcResult != null){
				result = chekcResult;
			}else{
				
				PageInfo<PostAtoms> list = postAtomsService.queryPostatoms(id,pageNo, pageSize);
				result = new JsonResult<PageInfo<PostAtoms>>(list);
			}
			return result;
		}catch(YichuangException e){
			e.printStackTrace();
			return new JsonResult<PageInfo<PostAtoms>>(1,"获取帖子评论失败",null);
		}catch(Exception e){
			e.printStackTrace();
			return new JsonResult<PageInfo<PostAtoms>>(e);
		}
	} 
	
	/**
	 * 评论帖子
	 * @param postAtoms
	 * @param token
	 * @param session
	 * @return
	 */
	@RequestMapping("/savepostAtoms" )
	@ResponseBody
    public JsonResult<String> savePostAtoms(PostAtoms postAtoms, String token ,String keyParams){
		JsonResult<String> result = null;
		String volunteerId = postAtoms.getVolunteerId();
		if(StringUtils.isEmpty(volunteerId)){
			return new JsonResult<String>(DefaultResponse.PARAM_NULL_ERROR,null);
		}
		
		User user = new User();
		user.setVolunteerId(volunteerId);
		
		List<User> list = userService.getUserByVolunId(user);
		if(list != null && list.size() > 0){
			if(!list.get(0).getToken().equals(token)){
				return new JsonResult<String>(DefaultResponse.TOKEN_NULL_ERROR,null);
			}
		}
		
		try{
			JsonResult<String> checkResult = Utils.checkKeyParams(token+propertyService.KEY, keyParams);
			if(checkResult != null){
				result = checkResult;
			}else{
				postAtomsService.savePostAtoms(postAtoms);
				result = new JsonResult<String>(0,"Postings success",null);
			}
			return result;
		}catch(YichuangException e){
			e.printStackTrace();
			return new JsonResult<String>(e.getField(),e.getMessage(),null);
		}catch(Exception e){
			e.printStackTrace();
			return new JsonResult<String>(e);
		}
	} 
	
	/**
	 * 删除社区帖子
	 * @param postId
	 * @param volunteerId
	 * @param keyParams
	 * @return
	 */
	@RequestMapping("/deletePosts")
	@ResponseBody
	public JsonResult<String> deletePosts(String postId, String volunteerId, String keyParams){
		JsonResult<String> result = null;
		
		if(StringUtils.isEmpty(postId) || StringUtils.isEmpty(volunteerId)){
			return new JsonResult<String>(DefaultResponse.PARAM_NULL_ERROR,null);
		}
		
		try {
			result = Utils.checkKeyParams(postId+volunteerId+propertyService.KEY, keyParams);
			if(result != null){
				return result;
			}
			
			Posts posts = postsService.getPostsById(postId);
			if(posts == null){
				return new JsonResult<String>(1,"帖子不存在",null);
			}
			
			if(posts.getVolunteerId().equals(volunteerId)){
				postsService.deletePosts(posts);
				return new JsonResult<String>(0,"posts delete success",null);
			}else{
				return new JsonResult<String>(1,"不能自己的帖子",null);
			}
		} catch(YichuangException e){
			e.printStackTrace();
			return new JsonResult<String>(e.getField(),e.getMessage(),null);
		}catch(Exception e){
			e.printStackTrace();
			return new JsonResult<String>(e);
		}
	}
}
